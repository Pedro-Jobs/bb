module Diagnostico where
import Daml.Script
import DA.Assert
import DA.Optional
import DA.Date


type CreateEHRId = ContractId CreateEHR
type DiagnoseRecordId = ContractId DiagnoseRecord

-- proposal creat Health Record
template CreateEHR
    with
        doctor : Party
        patient : Party
        dateRecord : Date
        namePatient : Text
        nrIdNational : Text
        nameDoctor : Text
        ndIdDoctor : Text
        diagnoses : Text
        noteDoc : Text
        tratamento : Text
        notePat : Text
        rejected : Bool
    where
        signatory doctor
        observer patient

        -- doctor propose record
        choice CreateEHRPropose : CreateEHRId
            controller doctor
            do create this

        -- Patient can reject record
        choice CreateEHR_Reject : ()
            with
                feedback : Text
            controller patient
            do 
                create this with
                    notePat = feedback
                    rejected = True
                return ()
                
        -- Patient can Accept record
        choice CreateEHR_Accept : DiagnoseRecordId
            controller patient
            do create DiagnoseRecord with
                  doctorAut = doctor
                  patientAut = patient
                  observadorAut = []
                  dateRecordAut = dateRecord
                  namePatientAut = namePatient
                  nrIdNationalAut = nrIdNational
                  nameDoctorAut = nameDoctor
                  ndIdDoctorAut = ndIdDoctor
                  diagnosesAut = diagnoses
                  tratamentoAut = tratamento
                  noteAut = noteDoc
        

        

-- save DiagnoseRecord
template DiagnoseRecord
    with
        doctorAut : Party
        patientAut : Party
        observadorAut : [Party]
        dateRecordAut : Date
        namePatientAut : Text
        nrIdNationalAut : Text
        nameDoctorAut : Text
        ndIdDoctorAut : Text
        diagnosesAut: Text
        tratamentoAut : Text
        noteAut : Text
    where
        signatory patientAut
        observer doctorAut, observadorAut

        choice AddDelegation : DiagnoseRecordId
          with
          newobs : Party
            controller patientAut
            do
              create this with
                observadorAut = newobs :: observadorAut

        key patientAut : Party
        maintainer key

template Delegation
  with
    sig : Party
    delegees : [Party]
  where
    signatory sig
    observer delegees

    choice AddDelegees : ContractId Delegation
      with 
        newObs : Party
      controller sig
        do
          create this with delegees = newObs :: delegees
    

    nonconsuming choice UnkeyedFetch
      : DiagnoseRecord
      with
        cid : DiagnoseRecordId
        delegee : Party
      controller delegee
      do
        fetch cid

    nonconsuming choice VisibleKeyed
      : Bool
      with
        key : Party
        delegee : Party
      controller delegee
      do
        visibleByKey @DiagnoseRecord key

    nonconsuming choice LookupKeyed
      : Optional (DiagnoseRecordId)
      with
        lookupKey : Party
        delegee : Party
      controller delegee
      do
        lookupByKey @DiagnoseRecord lookupKey

    nonconsuming choice FetchKeyed
      : (DiagnoseRecordId, DiagnoseRecord)
      with
        lookupKey : Party
        delegee : Party
      controller delegee
      do
        fetchByKey @DiagnoseRecord lookupKey


template Helper
  with
    p : Party
  where
    signatory p

    choice FetchByKey : (DiagnoseRecordId, DiagnoseRecord)
      with
        keyedKey : Party
      controller p
      do fetchByKey @DiagnoseRecord keyedKey

    choice VisibleByKey : Bool
      with
        keyedKey : Party
      controller p
      do visibleByKey @DiagnoseRecord keyedKey

    choice LookupByKey : (Optional (DiagnoseRecordId))
      with
        keyedKey : Party
      controller p
      do lookupByKey @DiagnoseRecord keyedKey

    choice AssertNotVisibleKeyed : ()
      with
        delegationCid : ContractId Delegation
        delegee : Party
        key : Party
      controller p
      do
        b <- exercise delegationCid VisibleKeyed with
          delegee
          key
        assert $ not b

    choice AssertLookupKeyedIsNone : ()
      with
        delegationCid : ContractId Delegation
        delegee : Party
        lookupKey : Party
      controller p
      do
        b <- exercise delegationCid LookupKeyed with
          delegee
          lookupKey
        assert $ isNone b

    choice AssertFetchKeyedEqExpected : ()
      with
        delegationCid : ContractId Delegation
        delegee : Party
        lookupKey : Party
        expectedCid : DiagnoseRecordId
      controller p
      do
        (cid, keyed) <- exercise delegationCid FetchKeyed with
          delegee
          lookupKey
        cid === expectedCid





        

                    

        

setup : Script ()
setup = script do
    -- assing Medico and Paciente
    doctor1 <- allocateParty "Medico"
    patient <- allocateParty "Paciente"
    doctor2 <- allocateParty "Medico2" -- Doc


    --doctor1 propose a Diagnoses
    doctorDiagnoses1 <- submit doctor1 do 
        createCmd CreateEHR with
            doctor = doctor1
            patient = patient
            dateRecord = date 2023 Apr 03
            namePatient = "Rui Antonio"
            nrIdNational = "343243223 vfd"
            nameDoctor = "Dr. Carlitos, o curandeiro"
            ndIdDoctor = "656732hdbf"
            diagnoses = "O Paciente tem asma."
            noteDoc = "Precisas de tratamento"
            tratamento = "medicação por 3 meses de anabolizantes"
            notePat = "Nil" --inicialmente vazio
            rejected = False

    --patient1 reject the register diagnoses
    patientRejectsDiagnoses1 <- submit patient do
        exerciseCmd doctorDiagnoses1 CreateEHR_Reject
            with
                feedback = ""


    --doctor1 propose second Diagnoses
    doctorDiagnoses2 <- submit doctor1 do 
        createCmd CreateEHR with
            doctor = doctor1
            patient = patient
            dateRecord = date 2023 Apr 03
            namePatient = "Rui Antonio"
            nrIdNational = "343243223 vfd"
            nameDoctor = "Dr. Carlitos, o curandeiro"
            ndIdDoctor = "656732hdbf"
            diagnoses = "O paciente tem asma, e se nao etrar em tratamento tem um ano de vida."
            noteDoc = "Precisas de tratamento, e de prescrição médica"
            tratamento = "medicação por 3 meses de anabolizantes"
            notePat = "nil"
            rejected = False


    -- Accept the second Bio Record and create a Bio Record record 
    keyedCid0 <- submit patient do
        exerciseCmd doctorDiagnoses2 CreateEHR_Accept

    -- patient adds doctor2 prescription record 
    keyedCid <- submit patient do
        exerciseCmd keyedCid0 AddDelegation with
            newobs = doctor2

        -- patient set doctor2 as delegation 
    sigDelegationCid <- submit patient do
        createCmd Delegation with
            sig = patient
            delegees = [doctor2]

-- Stakeholder doctor2 can fetch prescription record
    (cid, l) <- submit doctor2 do
        Helper doctor2 `createAndExerciseCmd` FetchByKey patient
    keyedCid === cid

    ---- Stakeholder doctor2 can see the prescription record with authorization
    b <- submit doctor2 do
        exerciseCmd sigDelegationCid VisibleKeyed with
            delegee = doctor2
            key = patient
    assert b


  --archive patient1
    submit patient do
        exerciseCmd sigDelegationCid Archive