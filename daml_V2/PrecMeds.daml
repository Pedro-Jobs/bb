module PrecMeds where

import Daml.Script
import DA.Assert
import DA.Optional
import DA.Date


type CreatePrescriMedsRecordsId = ContractId CreatePrescriMedsRecords
type PrescriMedsRecordsId = ContractId PrescriMedsRecords
type PrescriMedsKey = (Party, Date)

template CreatePrescriMedsRecords
    with
        doctor : Party
        patient : Party
        datePresc : Date
        dateLimit : Date
        namePatient : Text
        nrIdNational : Text
        nameDoctor : Text
        ndIdDoctor : Text
        nrUtente : Int
        namePresc : Text
        codePresc : Text  
        rejected : Bool

    where
        signatory doctor
        observer patient

        -- Medico can propose CreatePrescriMedsRecords
        choice PrescriMedsRecordsPropose : CreatePrescriMedsRecordsId
            controller doctor
            do create this

        -- Patient can reject record
        choice CreatePrescriMedsRecordsReject : CreatePrescriMedsRecordsId
            controller patient
            do create this with
                    rejected = True
                
        -- Patient can Accept record
        choice CreatePrescriMedsRecordsAccept : PrescriMedsRecordsId
            controller patient
            do create PrescriMedsRecords with
                    doctorPresc = doctor
                    patientPresc = patient
                    observersPresc = []
                    datePresc = datePresc
                    dateLimitPresc = dateLimit
                    namePatientPresc = namePatient
                    nrIdNationalPatient = nrIdNational
                    nameDoctorPresc = nameDoctor
                    ndIdDoctorPresc = ndIdDoctor
                    nrUtente = nrUtente
                    namePresc = namePresc
                    codePresc = codePresc


-- save PrescriMedscRecords
template PrescriMedsRecords
    with
        doctorPresc : Party
        patientPresc : Party
        observersPresc : [Party]
        datePresc : Date
        dateLimitPresc : Date
        namePatientPresc : Text
        nrIdNationalPatient : Text
        nameDoctorPresc : Text
        ndIdDoctorPresc : Text
        nrUtente : Int
        namePresc : Text
        codePresc : Text
    where
        signatory patientPresc
        observer doctorPresc, observersPresc

        choice AddDelegation : PrescriMedsRecordsId
          with
          newobs : Party
            controller patientPresc
            do
              create this with
                observersPresc = newobs :: observersPresc
        key (patientPresc,datePresc) : PrescriMedsKey
        maintainer key._1


template Delegation
  with
    sig : Party
    delegees : [Party]
  where
    signatory sig
    observer delegees

    choice AddDelegees : ContractId Delegation
      with 
        newObs : Party
      controller sig
        do
          create this with delegees = newObs :: delegees

    nonconsuming choice ArchiveKeyed
      : ()
      with
        delegee : Party
        keyedCid : PrescriMedsRecordsId
      controller delegee
      do
        archive keyedCid

    nonconsuming choice UnkeyedFetch
      : PrescriMedsRecords
      with
        cid : PrescriMedsRecordsId
        delegee : Party
      controller delegee
      do
        fetch cid

    nonconsuming choice VisibleKeyed
      : Bool
      with
        key : PrescriMedsKey
        delegee : Party
      controller delegee
      do
        visibleByKey @PrescriMedsRecords key

    nonconsuming choice LookupKeyed
      : Optional (PrescriMedsRecordsId)
      with
        lookupKey : PrescriMedsKey
        delegee : Party
      controller delegee
      do
        lookupByKey @PrescriMedsRecords lookupKey

    nonconsuming choice FetchKeyed
      : (PrescriMedsRecordsId, PrescriMedsRecords)
      with
        lookupKey : PrescriMedsKey
        delegee : Party
      controller delegee
      do
        fetchByKey @PrescriMedsRecords lookupKey


template Helper
  with
    p : Party
  where
    signatory p

    choice FetchByKey : (PrescriMedsRecordsId, PrescriMedsRecords)
      with
        keyedKey : PrescriMedsKey
      controller p
      do fetchByKey @PrescriMedsRecords keyedKey

    choice VisibleByKey : Bool
      with
        keyedKey : PrescriMedsKey
      controller p
      do visibleByKey @PrescriMedsRecords keyedKey

    choice LookupByKey : (Optional (PrescriMedsRecordsId))
      with
        keyedKey : PrescriMedsKey
      controller p
      do lookupByKey @PrescriMedsRecords keyedKey

    choice AssertNotVisibleKeyed : ()
      with
        delegationCid : ContractId Delegation
        delegee : Party
        key : PrescriMedsKey
      controller p
      do
        b <- exercise delegationCid VisibleKeyed with
          delegee
          key
        assert $ not b

    choice AssertLookupKeyedIsNone : ()
      with
        delegationCid : ContractId Delegation
        delegee : Party
        lookupKey : PrescriMedsKey
      controller p
      do
        b <- exercise delegationCid LookupKeyed with
          delegee
          lookupKey
        assert $ isNone b

    choice AssertFetchKeyedEqExpected : ()
      with
        delegationCid : ContractId Delegation
        delegee : Party
        lookupKey : PrescriMedsKey
        expectedCid : PrescriMedsRecordsId
      controller p
      do
        (cid, keyed) <- exercise delegationCid FetchKeyed with
          delegee
          lookupKey
        cid === expectedCid


lookupTest : Script ()
lookupTest = script do

  -- Partie for `Keyed`
  patient <- allocateParty "Paciente" -- Signatory
  doctor1 <- allocateParty "Medico1" -- Doc
  doctor2 <- allocateParty "Medico2" -- Doc
  pharma <- allocateParty "Farmaceutico"
  blind <- allocateParty "Blind" -- Blind

  --doctor1 propose a prescription
  doctorPrescRecord1 <- submit doctor1 do 
      createCmd CreatePrescriMedsRecords with
          doctor = doctor1
          patient = patient
          datePresc = date 2023 Apr 22
          dateLimit = date 2023 Jul 22
          namePatient = "Jorge Coimbra"
          nrIdNational = "27321688 zdfe"
          nameDoctor = "Dr. André Jesus"
          ndIdDoctor = "21312323"
          nrUtente = 3422182212
          namePresc = "penicilina 1990"
          codePresc = "65136215 psdn"  
          rejected = False  


  --patient1 reject the presc: nrIdNational incorrect
  patientRejectsPrescRecord1 <- submit patient do
      exerciseCmd doctorPrescRecord1 CreatePrescriMedsRecordsReject

  --archive first proposal presc
  submit doctor1 do
    exerciseCmd patientRejectsPrescRecord1 Archive

  doctorPrescRecord2 <- submit doctor1 do 
      createCmd CreatePrescriMedsRecords with
          doctor = doctor1
          patient = patient
          datePresc = date 2023 Apr 22
          dateLimit = date 2023 Jul 22
          namePatient = "Jorge Coimbra"
          nrIdNational = "27321678 zdfe"
          nameDoctor = "Dr. André Jesus"
          ndIdDoctor = "21312323"
          nrUtente = 3422182212
          namePresc = "penicilina 2000"
          codePresc = "65136215 psdn"  
          rejected = False

  -- Accept the second presc and create a prescription record 
  keyedCid0 <- submit patient do
      exerciseCmd doctorPrescRecord2 CreatePrescriMedsRecordsAccept
  

  -- patient adds pharma prescription record 
  keyedCid <- submit patient do
      exerciseCmd keyedCid0 AddDelegation with
          newobs = pharma



  -- patient set pharma as delegation 
  sigDelegationCid <- submit patient do
    createCmd Delegation with
      sig = patient
      delegees = [doctor2, pharma]

 -- Stakeholder pharma can fetch prescription record
  (cid, l) <- submit pharma do
    Helper pharma `createAndExerciseCmd` FetchByKey (patient,date 2023 Apr 22)
  keyedCid === cid

  ---- Stakeholder pharma can see the prescription record with authorization
  b <- submit pharma do
    exerciseCmd sigDelegationCid VisibleKeyed with
      delegee = pharma
      key = (patient,date 2023 Apr 22)
  assert b

  -- TESTING LOOKUPS AND FETCHES

  -- Maintainer patient can fetch prescription record 
  (cid, keyed) <- submit patient do
    Helper patient `createAndExerciseCmd` FetchByKey (patient,date 2023 Apr 22)
  cid === keyedCid
  -- Maintainer patient can see prescription record 
  b <- submit patient do
    Helper patient `createAndExerciseCmd` VisibleByKey (patient,date 2023 Apr 22)
  assert b
  
  -- Maintainer can lookup prescription record 
  mcid <- submit patient do
    Helper patient `createAndExerciseCmd` LookupByKey (patient,date 2023 Apr 22)
  mcid === Some keyedCid
  -- Stakeholder doctor1 can fetch prescription record 
  (cid, l) <- submit doctor1 do
    Helper doctor1 `createAndExerciseCmd` FetchByKey (patient,date 2023 Apr 22)
  keyedCid === cid

  -- Stakeholder doctor1 can't see without authorization
  submitMustFail doctor1 do
    Helper doctor1 `createAndExerciseCmd` VisibleByKey (patient,date 2023 Apr 22)
  

-- Stakeholder doctor1 can't lookup without authorization
  submitMustFail doctor1 do
    Helper doctor1 `createAndExerciseCmd` LookupByKey (patient,date 2023 Apr 22)

  -- Stakeholder pharma can lookup with authorization
  mcid <- submit pharma do
    exerciseCmd sigDelegationCid LookupKeyed with
      delegee = pharma
      lookupKey = (patient,date 2023 Apr 22)
  mcid === Some keyedCid


  -- doctor2 can't fetch through the key
  submitMustFail doctor2 do
    Helper doctor2 `createAndExerciseCmd` FetchByKey (patient,date 2023 Apr 22)
  -- doctor2 can't see
  submitMustFail doctor2 do
    Helper doctor2 `createAndExerciseCmd` VisibleByKey (patient,date 2023 Apr 22)


  -- doctor2 can't lookup
  submitMustFail doctor2 do
    Helper doctor2 `createAndExerciseCmd` LookupByKey (patient,date 2023 Apr 22)



  -- doctor2 can't do positive lookup with maintainer authority.
  submitMustFail doctor2 do
    Helper doctor2 `createAndExerciseCmd` AssertNotVisibleKeyed with
      delegationCid = sigDelegationCid
      delegee = doctor2
      key = (patient,date 2023 Apr 22)



-- ARCHIVES PRESCRIPTION AND DELEGATION


  -- pharma can archive the prescription 
  submit pharma do
    exerciseCmd sigDelegationCid ArchiveKeyed with
      delegee = pharma
      keyedCid


  --archive delegation
  submit patient do
    exerciseCmd sigDelegationCid Archive


      
  

  return ()